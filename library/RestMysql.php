<?php
/**
 * Mysql turned into simple key-value store.
 * 
 * @author wintermute
 *
 */
class RestMysql {
	/**
	 * Connects to database.
	 * If no host specified - uses localhost.
	 * If database doesn't exist it tries to create one.
	 * If no database name specified it tries to create one named "restapidb".
	 * 
	 * @param unknown_type $username
	 * @param unknown_type $password
	 * @param unknown_type $host
	 * @param unknown_type $database
	 */
	function RestMysql($username, $password, $host=false, $database=false){
		$this->database = $database?$database:"restapidb";
		$this->host = $host?$host:'127.0.0.1';
		$this->db = mysql_connect($this->host, $username, $password);
		if (!$this->db) {
			if(isset($_GET['beatle'])){echo 'Could not connect: ' . mysql_error();}
		    die();
		}
		$db_selected = mysql_select_db($this->database, $this->db);
		if (!$db_selected) {
			mysql_query("CREATE DATABASE ".$this->database); 
			mysql_select_db($this->database, $this->db);
		}
	}
	/**
	 * Creates or updates database scheme.
	 * Scheme is the database scheme expressed in PHP array format like this:
	 * $scheme = array(
	 * 		"tableName"=>array(
	 * 			"fieldName"=>"string",
	 *			"anotherField"=>"int",
	 *			"thirdField"=>"double"
	 * 		)
	 * );
	 * @param array $scheme
	 */
	function updateScheme($scheme){
		foreach($scheme as $table_name => $table){
			$sql = "CREATE TABLE IF NOT EXISTS $table_name (mkey INT NOT NULL AUTO_INCREMENT PRIMARY KEY, id VARCHAR(64))";
			mysql_query($sql, $this->db);
			if(isset($_GET['beatle'])){echo "updateSchema(): ".$sql." ".mysql_error()." \n";}
			$sql = "CREATE UNIQUE INDEX ".$table_name."_idx ON $table_name (id)";
			mysql_query($sql, $this->db);
			if(isset($_GET['beatle'])){echo "updateSchema(): ".$sql." ".mysql_error()." \n";}
			$current_fields = $this->listFields($table_name);
			$new_fields = array("mkey", "id");
			foreach($table as $field_name => $field_type){
				if($field_name == 'id'){continue;}
				if(in_array($field_name, $current_fields)){
					$sql = "ALTER TABLE ".$table_name." MODIFY ";
				}else{
					$sql = "ALTER TABLE ".$table_name." ADD ";
				}
				switch($field_type){
					case "int":
						$sql .= "(".$field_name." INT)";
						break;
					case "double":
						$sql .= "(".$field_name." DOUBLE)";
						break;
					default:
						$sql .= "(".$field_name." TEXT)";
				}
				mysql_query($sql, $this->db);
				if(isset($_GET['beatle'])){echo "updateSchema(): ".$sql." ".mysql_error()." \n";}
				array_push($new_fields, $field_name);
			}
			$delete_fields = array_diff($current_fields, $new_fields);
			if(count($delete_fields) > 0){
				foreach($delete_fields as $delete_field){
					$sql = "ALTER TABLE $table_name DROP $delete_field";
					mysql_query($sql, $this->db);
					if(isset($_GET['beatle'])){echo "updateSchema(): ".$sql." ".mysql_error()." \n";}
				}
			}
		}
	}
	/**
	 * 
	 * Search records and returns in a nice PHP array
	 * Example $scheme:
	 * array(
	 * 		"tableName"=>array(
	 * 			"fieldName"=>"field value"
	 * 		)
	 * );
	 * Note: "field value" can contain wildcards or it can be array 
	 * with table name and field name pair referenced like so:
	 * array("tableName", "fieldName") - it then uses value from a previous query.
	 * If "field value" is false then just the field is returned and not used in the where clause.
	 * @param array $scheme
	 * @param int $limit
	 * @param int $offset
	 * @param string $order_by
	 * @param enum["asc", "desc"] $order_direction
	 */
	function get($scheme, $limit="20", $offset="0", $order_by="mkey", $order_direction="desc"){
		$ares = array();
		foreach($scheme as $table_name => $table){
			$sq = array();
			$flds = array();
			foreach($table as $field_name => $field_value){
				if($field_value){
					if(is_array($field_value)){
						$field_value = $ares[$field_value[0]][$field_value[1]];
					}
					$xpr = "$field_name LIKE '".$field_value."'";
					if(strpos($field_value, "%") === false && strpos($field_value, "_") === false){
						$xpr = "$field_name = '".$field_value."'";
					}
					array_push($sq, $xpr);
				}
				array_push($flds, $field_name);
			}
			$sql = "SELECT ".implode(", ", $flds)." FROM $table_name";
			if(count($sq) > 0){
				$sql .= " WHERE ".implode(" AND ", $sq);
			}
			$sql .= " ORDER BY ".$order_by." ".(($order_direction=='desc')?'DESC':'ASC');
			$sql .= " limit $offset,$limit";
			if(isset($_GET['beatle'])){echo "get(): ".$sql;}
			$result = mysql_query($sql, $this->db);
			$ares[$table_name] = array();
			if ($result) {
				if (mysql_num_rows($result) > 0) {
				    while ($row = mysql_fetch_assoc($result)) {
				        $ares[$table_name][] = $row;
				    }
				}
			}
		}
		return $ares;
	}
	/**
	 * 
	 * Inserts or updates record using "id" field. If no "id" specified - it is autogenerated
	 * $scheme = array(
	 * 		"tableName"=>array(
	 * 			"id"=>"recordId"
	 * 			"fieldName"=>"fieldValue"
	 * 		)
	 * );
	 * @param array $struct
	 */
	 function set($scheme){
		foreach($scheme as $table_name => $table){
			if(!isset($table['id'])){
				$table['id'] = uniqid("", true);
				$scheme[$table_name]['id'] = $table['id'];
			}
			$sql = "INSERT INTO $table_name";
			$names = array();
			$vals = array();
			$upd = array();
			foreach($table as $field_name => $field_value){
				array_push($names, $field_name);
				array_push($vals, $field_value);
				array_push($upd, $field_name."='".$field_value."'");
			}
			$sql .= " (".implode(", ", $names).") VALUES ('".implode("', '", $vals)."') ON DUPLICATE KEY UPDATE ".implode(", ", $upd);
			mysql_query($sql, $this->db);
			if(isset($_GET['beatle'])){echo "set(): ".$sql." ".mysql_error()." \n";}
		}
		return $scheme;
	}
	/**
	 * 
	 * Returns PHP array with a list of fields in a given table
	 * @param string $table_name
	 */
	function listFields($table_name){
		$result = mysql_query("SHOW COLUMNS FROM ".$table_name, $this->db);
		if (!$result) {
		    return array();
		}
		$res = array();
		if (mysql_num_rows($result) > 0) {
		    while ($row = mysql_fetch_assoc($result)) {
		        $res[] = $row['Field'];
		    }
		}
		return $res;
	}
}
?>